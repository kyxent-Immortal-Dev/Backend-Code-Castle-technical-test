openapi: 3.0.3
servers:
  - url: "http://localhost/api"
    description: Production Server
  - url: "http://localhost:8000/api"
    description: Local Development Server
info:
  title: System Inventory API
  description: "Complete API for comprehensive inventory management with authentication and role-based access control. This API provides endpoints for user management, product inventory, supplier management, purchase orders, sales management with automatic stock deduction, client management, and automatic stock updates with admin and vendedor roles."
  version: 1.0.0
  contact:
    email: "admin@system.com"
    name: System Administrator
    url: "http://localhost/api/documentation"
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
servers:
  -
    url: "http://localhost/api"
    description: Local Development Server
  -
    url: "http://localhost/api"
    description: Production Server
paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with role assignment. User is automatically logged in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and create session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get authenticated user's profile information
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user and invalidate session
      security:
        -
          cookieAuth: []
      requestBody: null
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /refresh:
    post:
      tags:
        - Authentication
      summary: Refresh session
      description: Regenerate session ID for security
      security:
        -
          cookieAuth: []
      requestBody: null
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve list of all users with optional filtering and pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{user}:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve list of all users with optional filtering and pagination
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: user
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Users
      summary: Update user
      description: Update existing user (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      parameters:
        -
          name: user
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user account (Admin only)
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: user
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{id}/toggle-status:
    patch:
      tags:
        - Users
      summary: Toggle user status
      description: Toggle user active/inactive status (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Id identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve list of all products with optional filtering and pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Products
      summary: Create new product
      description: Create a new product in inventory (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Product identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Products
      summary: Update product
      description: Update existing product (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequest"
      parameters:
        -
          name: id
          in: path
          description: Product identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete product from inventory (Admin only)
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Product identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/{id}/toggle-status:
    patch:
      tags:
        - Products
      summary: Toggle product status
      description: Toggle product active/inactive status (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Product identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/low-stock:
    get:
      tags:
        - Products
      summary: Get low stock products
      description: Retrieve products with low stock (less than 10 units)
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/out-of-stock:
    get:
      tags:
        - Products
      summary: Get out of stock products
      description: Retrieve products with no stock available
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/stats:
    get:
      tags:
        - Products
      summary: Get inventory statistics
      description: Retrieve comprehensive inventory statistics
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/price-range:
    get:
      tags:
        - Products
      summary: Get products by price range
      description: Retrieve products within a specific price range
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: min_price
          in: query
          description: Minimum price
          required: false
          schema:
            type: number
            example: 10.00
        -
          name: max_price
          in: query
          description: Maximum price
          required: false
          schema:
            type: number
            example: 100.00
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Get all suppliers
      description: Retrieve list of all suppliers with pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Suppliers
      summary: Create new supplier
      description: Create a new supplier (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSupplierRequest"
      responses:
        201:
          description: Supplier created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/{id}:
    get:
      tags:
        - Suppliers
      summary: Get supplier by ID
      description: Retrieve a specific supplier by its ID
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Supplier identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Suppliers
      summary: Update supplier
      description: Update existing supplier (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSupplierRequest"
      parameters:
        -
          name: id
          in: path
          description: Supplier identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Suppliers
      summary: Delete supplier
      description: Delete supplier (Admin only)
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Supplier identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/{id}/toggle-status:
    patch:
      tags:
        - Suppliers
      summary: Toggle supplier status
      description: Toggle supplier active/inactive status (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Supplier identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/active:
    get:
      tags:
        - Suppliers
      summary: Get active suppliers
      description: Retrieve only active suppliers
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/top:
    get:
      tags:
        - Suppliers
      summary: Get top supplier
      description: Retrieve the supplier with most purchases
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/by-amount:
    get:
      tags:
        - Suppliers
      summary: Get suppliers by total amount
      description: Retrieve suppliers ordered by total purchase amount
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/stats:
    get:
      tags:
        - Suppliers
      summary: Get supplier statistics
      description: Retrieve comprehensive supplier statistics
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /suppliers/search:
    get:
      tags:
        - Suppliers
      summary: Search suppliers
      description: Search suppliers by various criteria
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: name
          in: query
          description: Supplier name
          required: false
          schema:
            type: string
            example: "Tech Solutions"
        -
          name: email
          in: query
          description: Supplier email
          required: false
          schema:
            type: string
            example: "contact@techsolutions.com"
        -
          name: phone
          in: query
          description: Supplier phone
          required: false
          schema:
            type: string
            example: "+1234567890"
        -
          name: has_purchases
          in: query
          description: Filter by suppliers with purchases
          required: false
          schema:
            type: boolean
            example: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases:
    get:
      tags:
        - Purchases
      summary: Get all purchases
      description: Retrieve list of all purchases with pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Purchases
      summary: Create new purchase
      description: Create a new purchase with multiple products (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePurchaseRequest"
      responses:
        201:
          description: Purchase created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/{id}:
    get:
      tags:
        - Purchases
      summary: Get purchase by ID
      description: Retrieve a specific purchase by its ID
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Purchase identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Purchase not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Purchases
      summary: Delete purchase
      description: Delete purchase (Admin only, only pending purchases)
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Purchase identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Purchase not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/{id}/complete:
    patch:
      tags:
        - Purchases
      summary: Complete purchase
      description: Mark purchase as completed and update product stock (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Purchase identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Purchase not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/{id}/cancel:
    patch:
      tags:
        - Purchases
      summary: Cancel purchase
      description: Mark purchase as cancelled (Admin only, only pending purchases)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Purchase identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Purchase not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/status/{status}:
    get:
      tags:
        - Purchases
      summary: Get purchases by status
      description: Retrieve purchases filtered by status
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: status
          in: path
          description: Purchase status
          required: true
          schema:
            type: string
            enum:
              - pending
              - completed
              - cancelled
            example: "pending"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/date-range:
    get:
      tags:
        - Purchases
      summary: Get purchases by date range
      description: Retrieve purchases within a specific date range
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: start_date
          in: query
          description: Start date (YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-01"
        -
          name: end_date
          in: query
          description: End date (YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: date
            example: "2024-12-31"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Bad request - dates required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/supplier/{supplierId}:
    get:
      tags:
        - Purchases
      summary: Get purchases by supplier
      description: Retrieve all purchases from a specific supplier
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: supplierId
          in: path
          description: Supplier identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/stats:
    get:
      tags:
        - Purchases
      summary: Get purchase statistics
      description: Retrieve comprehensive purchase statistics
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/monthly:
    get:
      tags:
        - Purchases
      summary: Get monthly purchase totals
      description: Retrieve monthly purchase totals for the last 12 months
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /purchases/top-products:
    get:
      tags:
        - Purchases
      summary: Get top purchased products
      description: Retrieve products ordered by purchase quantity
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: limit
          in: query
          description: Number of products to return
          required: false
          schema:
            type: integer
            default: 10
            example: 10
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients:
    get:
      tags:
        - Clients
      summary: Get all clients
      description: Retrieve list of all clients with pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Clients
      summary: Create new client
      description: Create a new client (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequest"
      responses:
        201:
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients/{id}:
    get:
      tags:
        - Clients
      summary: Get client by ID
      description: Retrieve a specific client by its ID
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Client identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Clients
      summary: Update client
      description: Update existing client (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientRequest"
      parameters:
        -
          name: id
          in: path
          description: Client identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Clients
      summary: Delete client
      description: Delete client (Admin only, only if no sales associated)
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Client identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients/{id}/toggle-status:
    patch:
      tags:
        - Clients
      summary: Toggle client status
      description: Toggle client active/inactive status (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Client identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients/active:
    get:
      tags:
        - Clients
      summary: Get active clients
      description: Retrieve only active clients
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients/search:
    get:
      tags:
        - Clients
      summary: Search clients
      description: Search clients by various criteria
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: name
          in: query
          description: Client name
          required: false
          schema:
            type: string
            example: "John Doe"
        -
          name: email
          in: query
          description: Client email
          required: false
          schema:
            type: string
            example: "john@example.com"
        -
          name: phone
          in: query
          description: Client phone
          required: false
          schema:
            type: string
            example: "+1234567890"
        -
          name: is_active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
            example: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /clients/stats:
    get:
      tags:
        - Clients
      summary: Get client statistics
      description: Retrieve comprehensive client statistics
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales:
    get:
      tags:
        - Sales
      summary: Get all sales
      description: Retrieve list of all sales with pagination
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Sales
      summary: Create new sale
      description: Create a new sale with automatic stock deduction (Admin only)
      security:
        -
          cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSaleRequest"
      responses:
        201:
          description: Sale created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        422:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/{id}:
    get:
      tags:
        - Sales
      summary: Get sale by ID
      description: Retrieve a specific sale by its ID
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: id
          in: path
          description: Sale identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Sale not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/{id}/cancel:
    patch:
      tags:
        - Sales
      summary: Cancel sale
      description: Cancel sale and restore product stock (Admin only)
      security:
        -
          cookieAuth: []
      requestBody: null
      parameters:
        -
          name: id
          in: path
          description: Sale identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Access denied. Admin role required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Sale not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/stats:
    get:
      tags:
        - Sales
      summary: Get sales statistics
      description: Retrieve comprehensive sales statistics
      security:
        -
          cookieAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/status/{status}:
    get:
      tags:
        - Sales
      summary: Get sales by status
      description: Retrieve sales filtered by status
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: status
          in: path
          description: Sale status
          required: true
          schema:
            type: string
            enum:
              - active
              - cancelled
            example: "active"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/client/{clientId}:
    get:
      tags:
        - Sales
      summary: Get sales by client
      description: Retrieve all sales for a specific client
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: clientId
          in: path
          description: Client identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/user/{userId}:
    get:
      tags:
        - Sales
      summary: Get sales by user
      description: Retrieve all sales made by a specific user
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/date-range:
    get:
      tags:
        - Sales
      summary: Get sales by date range
      description: Retrieve sales within a specific date range
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: start_date
          in: query
          description: Start date (YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-01"
        -
          name: end_date
          in: query
          description: End date (YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: date
            example: "2024-12-31"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        400:
          description: Bad request - dates required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/monthly:
    get:
      tags:
        - Sales
      summary: Get monthly sales totals
      description: Retrieve monthly sales totals for a specific year
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: year
          in: query
          description: Year for monthly totals
          required: false
          schema:
            type: integer
            default: 2024
            example: 2024
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /sales/top-products:
    get:
      tags:
        - Sales
      summary: Get top selling products
      description: Retrieve products ordered by sales quantity
      security:
        -
          cookieAuth: []
      parameters:
        -
          name: limit
          in: query
          description: Number of products to return
          required: false
          schema:
            type: integer
            default: 10
            example: 10
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: laravel_session
      description: Session cookie for authentication
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - role
        - is_active
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the user
        name:
          type: string
          example: John Doe
          description: Full name of the user
        email:
          type: string
          format: email
          example: "john@example.com"
          description: Unique email address
        role:
          type: string
          enum:
            - admin
            - vendedor
          example: admin
          description: User role in the system
        is_active:
          type: boolean
          example: true
          description: Whether the user account is active
        email_verified_at:
          type: string
          format: "date-time"
          nullable: true
          description: Email verification timestamp
        created_at:
          type: string
          format: "date-time"
          description: Account creation timestamp
        updated_at:
          type: string
          format: "date-time"
          description: Last update timestamp
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@system.com"
          description: User's email address
        password:
          type: string
          example: password123
          description: User's password (minimum 8 characters)
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: John Doe
          description: Full name of the user
        email:
          type: string
          format: email
          example: "john@example.com"
          description: Unique email address
        password:
          type: string
          minLength: 8
          example: password123
          description: Password (minimum 8 characters)
        password_confirmation:
          type: string
          example: password123
          description: Password confirmation (must match password)
        role:
          type: string
          enum:
            - admin
            - vendedor
          example: vendedor
          description: User role (defaults to vendedor if not specified)
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          example: New User
          description: Full name of the user
        email:
          type: string
          format: email
          example: "newuser@example.com"
          description: Unique email address
        password:
          type: string
          minLength: 8
          example: password123
          description: Password (minimum 8 characters)
        role:
          type: string
          enum:
            - admin
            - vendedor
          example: vendedor
          description: User role in the system
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: Updated Name
          description: Full name of the user
        email:
          type: string
          format: email
          example: "updated@example.com"
          description: Unique email address
        password:
          type: string
          minLength: 8
          example: newpassword123
          description: New password (minimum 8 characters)
        role:
          type: string
          enum:
            - admin
            - vendedor
          example: admin
          description: User role in the system
        is_active:
          type: boolean
          example: true
          description: Whether the user account is active
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if the operation was successful
        data:
          type: object
          description: Response data (varies by endpoint)
        message:
          type: string
          example: Operation completed successfully
          description: "Human-readable success message"
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Indicates if the operation was successful
        message:
          type: string
          example: Error message
          description: "Human-readable error message"
        errors:
          type: object
          nullable: true
          description: Detailed error information (if available)
    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Indicates if the operation was successful
        message:
          type: string
          example: Validation errors
          description: "Human-readable error message"
        errors:
          type: object
          description: "Field-specific validation errors"
          properties:
            email:
              type: array
              items:
                type: string
              example:
                - The email field is required.
            password:
              type: array
              items:
                type: string
              example:
                - The password must be at least 8 characters.
    CreateProductRequest:
      type: object
      required:
        - name
        - unit_price
        - stock
      properties:
        name:
          type: string
          example: "Laptop Dell XPS 13"
          description: Product name (unique)
        description:
          type: string
          example: "High-performance laptop with 13-inch display"
          description: Product description (optional)
        unit_price:
          type: number
          minimum: 0
          maximum: 999999.99
          example: 1299.99
          description: Unit price of the product
        stock:
          type: integer
          minimum: 0
          maximum: 999999
          example: 50
          description: Initial stock quantity
        is_active:
          type: boolean
          example: true
          description: Whether the product is active
    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Laptop Name"
          description: Product name (unique)
        description:
          type: string
          example: "Updated product description"
          description: Product description
        unit_price:
          type: number
          minimum: 0
          maximum: 999999.99
          example: 1399.99
          description: Unit price of the product
        stock:
          type: integer
          minimum: 0
          maximum: 999999
          example: 75
          description: Stock quantity
        is_active:
          type: boolean
          example: true
          description: Whether the product is active
    CreateSupplierRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "Tech Solutions Inc."
          description: Supplier company name
        email:
          type: string
          format: email
          example: "contact@techsolutions.com"
          description: Supplier email address (unique)
        phone:
          type: string
          example: "+1 (555) 123-4567"
          description: Supplier phone number (optional)
        address:
          type: string
          example: "123 Business St, Tech City, TC 12345"
          description: Supplier address (optional)
        is_active:
          type: boolean
          example: true
          description: Whether the supplier is active
    UpdateSupplierRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Company Name"
          description: Supplier company name
        email:
          type: string
          format: email
          example: "updated@company.com"
          description: Supplier email address (unique)
        phone:
          type: string
          example: "+1 (555) 987-6543"
          description: Supplier phone number
        address:
          type: string
          example: "456 New Address, City, ST 54321"
          description: Supplier address
        is_active:
          type: boolean
          example: true
          description: Whether the supplier is active
    CreatePurchaseRequest:
      type: object
      required:
        - supplier_id
        - details
      properties:
        supplier_id:
          type: integer
          example: 1
          description: ID of the supplier
        purchase_date:
          type: string
          format: date
          example: "2024-01-15"
          description: Date of purchase (defaults to today)
        notes:
          type: string
          example: "Monthly inventory restock"
          description: Additional notes about the purchase
        details:
          type: array
          minItems: 1
          description: Array of purchase details
          items:
            type: object
            required:
              - product_id
              - quantity
              - purchase_price
            properties:
              product_id:
                type: integer
                example: 1
                description: ID of the product to purchase
              quantity:
                type: integer
                minimum: 1
                maximum: 999999
                example: 50
                description: Quantity to purchase
              purchase_price:
                type: number
                minimum: 0.01
                maximum: 999999.99
                example: 10.50
                description: Purchase price per unit
    Client:
      type: object
      required:
        - id
        - name
        - email
        - is_active
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the client
        name:
          type: string
          example: "John Doe"
          description: Full name of the client
        email:
          type: string
          format: email
          example: "john@example.com"
          description: Client's email address
        phone:
          type: string
          nullable: true
          example: "+1234567890"
          description: Client's phone number
        is_active:
          type: boolean
          example: true
          description: Whether the client is active
        created_at:
          type: string
          format: "date-time"
          description: Client creation timestamp
        updated_at:
          type: string
          format: "date-time"
          description: Last update timestamp
    CreateClientRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "Jane Smith"
          description: Full name of the client
        email:
          type: string
          format: email
          example: "jane@example.com"
          description: Client's email address (unique)
        phone:
          type: string
          example: "+1234567890"
          description: Client's phone number (optional)
        is_active:
          type: boolean
          example: true
          description: Whether the client is active (defaults to true)
    UpdateClientRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Name"
          description: Full name of the client
        email:
          type: string
          format: email
          example: "updated@example.com"
          description: Client's email address (unique)
        phone:
          type: string
          example: "+1234567890"
          description: Client's phone number
        is_active:
          type: boolean
          example: true
          description: Whether the client is active
    Sale:
      type: object
      required:
        - id
        - client_id
        - user_id
        - sale_date
        - total_amount
        - status
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the sale
        client_id:
          type: integer
          example: 1
          description: ID of the client who made the purchase
        user_id:
          type: integer
          example: 1
          description: ID of the user who processed the sale
        sale_date:
          type: string
          format: date
          example: "2024-01-15"
          description: Date when the sale was made
        total_amount:
          type: number
          format: float
          example: 299.99
          description: Total amount of the sale
        status:
          type: string
          enum:
            - active
            - cancelled
          example: "active"
          description: Current status of the sale
        notes:
          type: string
          nullable: true
          example: "Customer requested gift wrapping"
          description: Additional notes about the sale
        created_at:
          type: string
          format: "date-time"
          description: Sale creation timestamp
        updated_at:
          type: string
          format: "date-time"
          description: Last update timestamp
    SaleDetail:
      type: object
      required:
        - id
        - sale_id
        - product_id
        - quantity
        - sale_price
        - subtotal
      properties:
        id:
          type: integer
          example: 1
          description: Unique identifier for the sale detail
        sale_id:
          type: integer
          example: 1
          description: ID of the sale this detail belongs to
        product_id:
          type: integer
          example: 1
          description: ID of the product sold
        quantity:
          type: integer
          minimum: 1
          example: 2
          description: Quantity of the product sold
        sale_price:
          type: number
          format: float
          example: 149.99
          description: Price per unit at the time of sale
        subtotal:
          type: number
          format: float
          example: 299.98
          description: Subtotal for this product (quantity * sale_price)
        created_at:
          type: string
          format: "date-time"
          description: Detail creation timestamp
        updated_at:
          type: string
          format: "date-time"
          description: Last update timestamp
    CreateSaleRequest:
      type: object
      required:
        - client_id
        - sale_details
      properties:
        client_id:
          type: integer
          example: 1
          description: ID of the client making the purchase
        sale_date:
          type: string
          format: date
          example: "2024-01-15"
          description: Date of sale (defaults to today)
        notes:
          type: string
          example: "Customer requested gift wrapping"
          description: Additional notes about the sale
        sale_details:
          type: array
          minItems: 1
          description: Array of products being sold
          items:
            type: object
            required:
              - product_id
              - quantity
              - sale_price
            properties:
              product_id:
                type: integer
                example: 1
                description: ID of the product to sell
              quantity:
                type: integer
                minimum: 1
                maximum: 999999
                example: 2
                description: Quantity to sell
              sale_price:
                type: number
                minimum: 0.01
                maximum: 999999.99
                example: 149.99
                description: Sale price per unit
tags:
  -
    name: Authentication
    description: User authentication endpoints including registration, login, logout, profile management, and session refresh
  -
    name: Users
    description: User management endpoints for administrators to create, read, update, delete, and manage user status
  -
    name: Products
    description: Product inventory management endpoints for administrators to manage products, stock levels, and inventory statistics
  -
    name: Suppliers
    description: Supplier management endpoints for administrators to manage vendor relationships, contact information, and supplier performance
  -
    name: Purchases
    description: Purchase order management endpoints for administrators to create purchases, manage inventory flow, and track supplier transactions
  -
    name: Clients
    description: Client management endpoints for administrators to manage customer relationships, contact information, and client status
  -
    name: Sales
    description: Sales management endpoints for administrators to create sales, manage inventory flow with automatic stock deduction, and track customer transactions
externalDocs:
  description: Find more info about this API
  url: "http://localhost/api/documentation"
